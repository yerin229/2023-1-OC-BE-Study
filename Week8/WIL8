# 기초 백엔드 스터디 8주차

복습: No
부제: Autowired, IOC
작성일시: 2023년 5월 28일 오후 9:11

1. **IoC와 프레임 워크, 라이브러리**
    - IoC (Inversion of Control)
        
        : 어떤 일을 하도록 만들어진 프레임 워크에서 제어의 권한 넘김으로써 클라이언트 코드가 신경써야 할 것을 줄이는 전략
        
        - 오브젝트 생성/관계 설정/사용/제거 등 오브젝트 전반에 걸친 모든 제어권을 앱이 갖는 것이 아닌 프레임워크의 컨테이너에게 넘기는 개념
    - 프레임워크
        
        : 앱 개발 시 필수 코드, 알고리즘, DB 연동 등의 기능 위해 어느정도 뼈대 제공
        
    - 라이브러리
        
        : 프로그래머가 개발하는데 필요한 특정 기능에 대한 도구 or 함수 모아둔 집합
        
    - 프레임워크 vs 라이브러리
        
        : Flow(흐름)에 대한 제어 권한이 어디에 있는지
        
        - 프레임워크
            - 전체적 흐름을 자체적으로 가짐
            - 프로그래머가 그 안에 필요한 코드 작성
        - 라이브러리
            - 사용자가 흐름에 대해 제어
            - 프로그래머가 필요한 상황에 가져다 사용
        
        ⇒ 프레임워크는 IoC가 적용되어 있음
        
        

2. **생성자를 통한 의존성 주입과 @Autowired비교**
    - 의존성 주입
        
        : 외부로부터 메모리에 올라가 있는 인스턴스의 레퍼런스를 인터페이스 타입의 파라미터로 의존관계를 설정
        
        - 필드 주입
            
            : @Autowired 어노테이션만으로도 간단하게 의존성 주입 가능
            
        - 생성자 주입
            
            : 단일 생성자인 경우 @Autowired 붙이지 않아도 됨
            
              생성자가 2개 이상인 경우 @Autowired 붙여줘야 함
            
        - 수정자 주입
            
            : 수정자(setter) 이용
            
    - 생성자 주입 방법 권장 이유
        - 순환 참조 방지
            - A가 B 참조하고 B가 A 참조하는 순환참조 발생 시,
                
                생성자 주입 방법은 객체 생성 시점에 빈을 주입
                
                → 서로 참조하는 객체가 생성되지 않은 상태에서 그 빈을 참조
                
                → 오류 발생
                
        - 테스트 용이
        - 조금 더 품질 좋은 코드 생성 가능
        - 불변성
            - 필드를 final로 선언 가능 → 초기화 후 빈 객체가 변경 X
                
                ⇒ 오류 사전 방지


                
3. **AOP (Aspect Oriented Programming/관점 지향 프로그래밍)**
    
    : 핵심적/부가적 관점으로 나누어서 보고 그 관점을 기준으로 모듈화
    
    ![1](https://github.com/yerin229/2023-1-OC-BE-Study/assets/127593340/0dafc873-3646-4041-94d2-1af4328b812e)
    
    ⇒ 흩어진 관심사(소스 코드 상에서 계속 반복해서 사용되는 부분들)를 모듈화
    
    ⇒ 모듈화 시켜놓은 블럭 = Aspect
    
    - AOP 적용 방법
        - 컴파일 타임 적용
            
            : 컴파일 시점에 바이트 코드 조작해 AOP가 적용된 바이트 코드 생성
            
        - 로드 타임 적용
            
            : 순수하게 컴파일 후 클래스 로딩 시점에 클래스 정보 변경
            
        - 런타임 적용 (스프링 AOP가 주로 사용)
            
            : A라는 클래스 타입의 Bean을 만들 때 A 타입의 Proxy Bean을 만들어 Proxy Bean이 Aspect 코드를 추가하여 동작하는 방법
